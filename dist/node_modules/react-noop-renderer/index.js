(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('scheduler'), require('react')) :
	typeof define === 'function' && define.amd ? define(['scheduler', 'react'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.ReactNoopRenderer = factory(global.Scheduler, global.React));
})(this, (function (Scheduler, React) { 'use strict';

	function _interopNamespaceDefault(e) {
		var n = Object.create(null);
		if (e) {
			Object.keys(e).forEach(function (k) {
				if (k !== 'default') {
					var d = Object.getOwnPropertyDescriptor(e, k);
					Object.defineProperty(n, k, d.get ? d : {
						enumerable: true,
						get: function () { return e[k]; }
					});
				}
			});
		}
		n.default = e;
		return Object.freeze(n);
	}

	var Scheduler__namespace = /*#__PURE__*/_interopNamespaceDefault(Scheduler);
	var React__namespace = /*#__PURE__*/_interopNamespaceDefault(React);

	const FunctionComponent = 0;
	const HostRoot = 3;
	const HostComponent = 5;
	const HostText = 6;
	const Fragment = 7;

	const NoFlags = 0b0000000;
	const Placement = 0b0000001;
	const Update = 0b0000010;
	const ChildDeletion = 0b0000100;
	const PassiveEffect = 0b0001000;
	const MutationMask = Placement | Update | ChildDeletion;
	const PassiveMask = PassiveEffect | ChildDeletion;

	const SyncLane = 0b0001;
	const InputContinuesLane = 0b0010;
	const DefaultLane = 0b0100;
	const NoLane = 0b0000;
	const NoLanes = 0b0000;
	function mergeLanes(laneA, laneB) {
	    return laneA | laneB;
	}
	function requestUpdateLane() {
	    //从上下文环境中获取scheduler优先级
	    const currentPriority = Scheduler.unstable_getCurrentPriorityLevel();
	    return schedulerToLanePriority(currentPriority);
	}
	function getHeighestPriorityLane(lanes) {
	    return lanes & -lanes;
	}
	function isSubsetOfLanes(set, subset) {
	    return (set & subset) === subset;
	}
	function markRootFinished(root, lane) {
	    root.pendingLanes &= ~lane;
	}
	function lanesToSchedulerPriority(lanes) {
	    const lane = getHeighestPriorityLane(lanes);
	    if (lane === SyncLane) {
	        return Scheduler.unstable_ImmediatePriority;
	    }
	    if (lane === InputContinuesLane) {
	        return Scheduler.unstable_UserBlockingPriority;
	    }
	    if (lane === DefaultLane) {
	        return Scheduler.unstable_NormalPriority;
	    }
	    return Scheduler.unstable_IdlePriority;
	}
	function schedulerToLanePriority(schedulePriority) {
	    if (schedulePriority === Scheduler.unstable_ImmediatePriority) {
	        return SyncLane;
	    }
	    if (schedulePriority === Scheduler.unstable_UserBlockingPriority) {
	        return InputContinuesLane;
	    }
	    if (schedulePriority === Scheduler.unstable_NormalPriority) {
	        return DefaultLane;
	    }
	    return NoLane;
	    // return IdleLane;
	}

	class FiberNode {
	    type;
	    tag;
	    pendingProps;
	    key;
	    stateNode;
	    ref;
	    return;
	    sibling;
	    child;
	    index;
	    memoizedProps;
	    memoizedState;
	    alternate;
	    flags;
	    subtreeFlags;
	    updateQueue;
	    deletions;
	    constructor(tag, pendingProps, key) {
	        // 实例属性
	        this.tag = tag;
	        this.key = key;
	        this.stateNode = null;
	        this.type = null;
	        //构成树状结构
	        // 指向父FilberNode
	        this.return = null;
	        // 指向兄弟FilberNode
	        this.sibling = null;
	        // 指向子FilberNode
	        this.child = null;
	        this.index = 0;
	        this.ref = null;
	        // 作为工作单元
	        this.pendingProps = pendingProps;
	        this.memoizedState = null;
	        this.memoizedProps = null;
	        this.updateQueue = null;
	        this.alternate = null;
	        // 副作用
	        this.flags = NoFlags;
	        this.subtreeFlags = NoFlags;
	        this.deletions = null;
	    }
	}
	class FiberRootNode {
	    container;
	    current;
	    finishedWork;
	    pendingLanes;
	    finishedLane;
	    pendingPassiveEffects;
	    callbackNode;
	    callbackPriority;
	    constructor(container, hostRootFiber) {
	        this.container = container;
	        this.current = hostRootFiber;
	        hostRootFiber.stateNode = this;
	        this.finishedWork = null;
	        this.pendingLanes = NoLanes;
	        this.finishedLane = NoLane;
	        this.pendingPassiveEffects = {
	            unmount: [],
	            update: []
	        };
	        this.callbackNode = null;
	        this.callbackPriority = NoLane;
	    }
	}
	function createWorkInProgress(current, pendingProps) {
	    let wip = current.alternate;
	    if (wip === null) {
	        // mount
	        wip = new FiberNode(current.tag, pendingProps, current.key);
	        wip.type = current.type;
	        wip.stateNode = current.stateNode;
	        wip.alternate = current;
	        current.alternate = wip;
	    }
	    else {
	        // update
	        wip.pendingProps = pendingProps;
	        wip.flags = NoFlags;
	        wip.subtreeFlags = NoFlags;
	        wip.deletions = null;
	    }
	    wip.type = current.type;
	    wip.updateQueue = current.updateQueue;
	    wip.child = current.child;
	    wip.memoizedProps = current.memoizedProps;
	    wip.memoizedState = current.memoizedState;
	    return wip;
	}
	function createFiberFromElement(element) {
	    const { type, key, props } = element;
	    let fiberTag = FunctionComponent;
	    if (typeof type === 'string') {
	        // <div/> type: div
	        fiberTag = HostComponent;
	    }
	    else if (typeof type !== 'function' && true) {
	        console.warn('为定义的type类型', element);
	    }
	    const fiber = new FiberNode(fiberTag, props, key);
	    fiber.type = type;
	    return fiber;
	}
	function createFiberFromFragment(elements, key) {
	    const fiber = new FiberNode(Fragment, elements, key);
	    return fiber;
	}

	const createUpdate = (action, lane) => {
	    return {
	        action,
	        lane,
	        next: null
	    };
	};
	const createUpdateQueue = () => {
	    return {
	        shared: {
	            pending: null
	        },
	        dispatch: null
	    };
	};
	const enqueueUpdateQueue = (updateQueue, update) => {
	    const pending = updateQueue.shared.pending;
	    if (pending === null) {
	        // pending -> a -> a 环状链表
	        update.next = update;
	    }
	    else {
	        // pending -> b -> a -> b 环状链表
	        update.next = pending.next;
	        pending.next = update;
	    }
	    updateQueue.shared.pending = update;
	};
	const processUpadteQueue = (baseState, pendingUpdate, renderLane) => {
	    const result = {
	        memoizedState: baseState,
	        baseState,
	        baseQueue: null
	    };
	    if (pendingUpdate !== null) {
	        const first = pendingUpdate.next;
	        let pending = pendingUpdate.next;
	        let newBaseState = baseState;
	        let newBaseQueueFirst = null;
	        let newBaseQueueLast = null;
	        let newState = baseState;
	        do {
	            const updateLane = pending.lane;
	            if (!isSubsetOfLanes(renderLane, updateLane)) {
	                // 优先级不够，被跳过
	                // if (true) {
	                // 	console.error('不应该进入这个逻辑');
	                // }
	                const clone = createUpdate(pending.action, pending.lane);
	                //是不是第一个被跳过的update
	                if (newBaseQueueFirst === null) {
	                    newBaseQueueFirst = clone;
	                    newBaseQueueLast = clone;
	                    newBaseState = newState;
	                }
	                else {
	                    newBaseQueueLast.next = clone;
	                    newBaseQueueLast = clone;
	                }
	            }
	            else {
	                //优先级足够的情况
	                if (newBaseQueueFirst !== null) {
	                    const clone = createUpdate(pending.action, NoLane);
	                    newBaseQueueLast.next = clone;
	                    newBaseQueueLast = clone;
	                }
	                const action = pendingUpdate.action;
	                if (action instanceof Function) {
	                    // baseState: 1 pendingUpdate: (x) => 4x result: 4
	                    newState = action(baseState);
	                }
	                else {
	                    // baseState: 1 pendingUpdate: 2 result: 2
	                    newState = action;
	                }
	            }
	            pending = pending?.next;
	        } while (first !== pending);
	        if (newBaseQueueFirst === null) {
	            // 本地计算没有update没有被跳过
	            newBaseState = newState;
	        }
	        else {
	            newBaseQueueLast.next = newBaseQueueFirst;
	        }
	        result.memoizedState = newState;
	        result.baseState = newBaseState;
	        result.baseQueue = newBaseQueueLast;
	    }
	    return result;
	};

	let instanceCounter = 0;
	const createInstance = (type, props) => {
	    const instance = {
	        id: instanceCounter++,
	        type,
	        children: [],
	        parent: -1,
	        props
	    };
	    return instance;
	};
	const appendInitialChild = (parent, child) => {
	    //id
	    const prevParentID = child.parent;
	    const parentID = 'rootID' in parent ? parent.rootID : parent.id;
	    if (prevParentID !== -1 && prevParentID !== parentID) {
	        throw new Error('不能重复挂载child');
	    }
	    child.parent = parentID;
	    parent.children.push(child);
	};
	const createTextInstance = (content) => {
	    const instance = {
	        text: content,
	        id: instanceCounter++,
	        parent: -1
	    };
	    return instance;
	};
	const appendChildToContainer = (parent, child) => {
	    //id
	    const prevParentID = child.parent;
	    if (prevParentID !== -1 && prevParentID !== parent.rootID) {
	        throw new Error('不能重复挂载child');
	    }
	    child.parent = parent.rootID;
	    parent.children.push(child);
	};
	// Q: 为什么commit Update要在这里实现
	const commitUpdate = (fiber) => {
	    switch (fiber.tag) {
	        case HostText:
	            const text = fiber.memoizedProps.content;
	            return commitTextUpdate(fiber.stateNode, text);
	        // case HostComponent:
	        default:
	            {
	                console.warn('未实现的update类型', fiber);
	            }
	            break;
	    }
	};
	const commitTextUpdate = (textInstance, content) => {
	    textInstance.text = content;
	};
	const removeChild = (child, container) => {
	    const index = container.children.indexOf(child);
	    if (index === -1) {
	        throw new Error('child不存在');
	    }
	    container.children.splice(index, 1);
	};
	function insertChildToContainer(child, container, before) {
	    const beforeIndex = container.children.indexOf(before);
	    if (beforeIndex === -1) {
	        throw new Error('before不存在');
	    }
	    const index = container.children.indexOf(before);
	    if (index !== -1) {
	        container.children.splice(index, 1);
	    }
	    container.children.splice(beforeIndex, 0, child);
	}
	const scheduleMicroTask = typeof queueMicrotask === 'function'
	    ? queueMicrotask
	    : typeof Promise === 'function'
	        ? (callback) => Promise.resolve(null).then(callback)
	        : setTimeout;

	const isSupportSymbol = typeof Symbol === 'function' && Symbol.for;
	const REACT_ELEMENT_TYPE = isSupportSymbol
	    ? Symbol.for('react.element')
	    : 0xeac7;
	const REACT_FRAGMENT_TYPE = isSupportSymbol
	    ? Symbol.for('react.fragment')
	    : 0xeacb;

	function ChildReconciler(shouldTrackEffect) {
	    function deleteChild(returnFiber, childToDelete) {
	        if (!shouldTrackEffect) {
	            return;
	        }
	        const deletions = returnFiber.deletions;
	        if (deletions === null) {
	            returnFiber.deletions = [childToDelete];
	            returnFiber.flags |= ChildDeletion;
	        }
	        else {
	            deletions?.push(childToDelete);
	        }
	    }
	    function deleteRemainingChildren(returnFiber, currentFirstChild) {
	        if (!shouldTrackEffect) {
	            return;
	        }
	        let childToDelete = currentFirstChild;
	        while (childToDelete !== null) {
	            deleteChild(returnFiber, childToDelete);
	            childToDelete = childToDelete.sibling;
	        }
	    }
	    function reconcileSingleElement(returnFiber, currentFiber, element) {
	        const key = element.key;
	        while (currentFiber !== null) {
	            // update情况
	            if (currentFiber.key === key) {
	                //key 相同
	                if (element.$$typeof === REACT_ELEMENT_TYPE) {
	                    if (currentFiber.type === element.type) {
	                        let props = element.props;
	                        if (element.type === REACT_FRAGMENT_TYPE) {
	                            props = element.props.children;
	                        }
	                        //type相同可以复用
	                        const existing = useFiber(currentFiber, props);
	                        existing.return = returnFiber;
	                        // 当前节点可复用，剩下的节点删除
	                        deleteRemainingChildren(returnFiber, currentFiber.sibling);
	                        return existing;
	                    }
	                    // key相同type不同，都删掉
	                    deleteRemainingChildren(returnFiber, currentFiber);
	                    break;
	                }
	                else {
	                    {
	                        console.warn('还未实现的react类型', element);
	                        break;
	                    }
	                }
	            }
	            else {
	                // key不同，删掉所有
	                deleteChild(returnFiber, currentFiber);
	                currentFiber = currentFiber.sibling;
	            }
	        }
	        //
	        let fiber;
	        if (element.type === REACT_FRAGMENT_TYPE) {
	            fiber = createFiberFromFragment(element.props.children, key);
	        }
	        else {
	            fiber = createFiberFromElement(element);
	        }
	        fiber.return = returnFiber;
	        return fiber;
	    }
	    function reconcileSingleTextNode(returnFiber, currentFiber, content) {
	        while (currentFiber !== null) {
	            // update
	            if (currentFiber.tag === HostText) {
	                // 类型没有变，可以复用
	                const existing = useFiber(currentFiber, { content });
	                existing.return = returnFiber;
	                deleteRemainingChildren(returnFiber, currentFiber.sibling);
	                return existing;
	            }
	            deleteChild(returnFiber, currentFiber);
	            currentFiber = currentFiber.sibling;
	        }
	        const fiber = new FiberNode(HostText, { content }, null);
	        fiber.return = returnFiber;
	        return fiber;
	    }
	    function placeSingleChild(fiber) {
	        if (shouldTrackEffect && fiber.alternate === null) {
	            fiber.flags |= Placement;
	        }
	        return fiber;
	    }
	    function reconcileChildArray(returnFiber, currentFirstChild, newChild) {
	        // 最后一个可复用fiber在current中的index
	        let lastPlaceIndex = 0;
	        // 创建的最后一个Fiber
	        let lastNewFiber = null;
	        // 创建的第一个Fiber
	        let firstNewFiber = null;
	        //1.将current保存在map中
	        const existingChildren = new Map();
	        let current = currentFirstChild;
	        while (current !== null) {
	            const keyToUse = current.key !== null ? current.key : current.index;
	            existingChildren.set(keyToUse, current);
	            current = current.sibling;
	        }
	        for (let i = 0; i < newChild.length; i++) {
	            //2.遍历newChild，寻找是否可复用
	            const after = newChild[i];
	            const newFiber = updateFromMap(returnFiber, existingChildren, i, after);
	            if (newFiber === null) {
	                continue;
	            }
	            //3.标记移动还是插入
	            newFiber.index = i;
	            newFiber.return = returnFiber;
	            if (lastNewFiber === null) {
	                lastNewFiber = newFiber;
	                firstNewFiber = newFiber;
	            }
	            else {
	                lastNewFiber.sibling = newFiber;
	                lastNewFiber = lastNewFiber.sibling;
	            }
	            if (!shouldTrackEffect) {
	                continue;
	            }
	            const current = newFiber.alternate;
	            if (current !== null) {
	                //update
	                const oldIndex = current.index;
	                if (oldIndex < lastPlaceIndex) {
	                    // 移动
	                    newFiber.flags |= Placement;
	                    continue;
	                }
	                else {
	                    //不移动
	                    lastPlaceIndex = oldIndex;
	                }
	            }
	            else {
	                //mount
	                newFiber.flags |= Placement;
	            }
	        }
	        //4.将map中剩下的标记删除
	        existingChildren.forEach((fiber) => {
	            deleteChild(returnFiber, fiber);
	        });
	        return firstNewFiber;
	    }
	    function updateFromMap(returnFiber, existingChildren, index, element) {
	        const keyToUse = element.key !== null ? element.key : index;
	        const before = existingChildren.get(keyToUse);
	        if (typeof element === 'string' || typeof element === 'number') {
	            //hostText
	            if (before) {
	                if (before.tag === HostText) {
	                    existingChildren.delete(keyToUse);
	                    return useFiber(before, { content: `${element}` });
	                }
	            }
	            return new FiberNode(HostText, { content: `${element}` }, null);
	        }
	        //ReactElemtn
	        if (typeof element === 'object' && element !== null) {
	            switch (element.$$typeof) {
	                case REACT_ELEMENT_TYPE:
	                    if (element.type === REACT_FRAGMENT_TYPE) {
	                        return updateFragment$1(returnFiber, before, element, keyToUse, existingChildren);
	                    }
	                    if (before) {
	                        if (before.type === element.type) {
	                            existingChildren.delete(keyToUse);
	                            return useFiber(before, element.props);
	                        }
	                    }
	                    return createFiberFromElement(element);
	            }
	            // TODO: 数组类型
	            if (Array.isArray(element) && true) {
	                console.warn('还未实现数组类型的child');
	            }
	        }
	        if (Array.isArray(element)) {
	            return updateFragment$1(returnFiber, before, element, keyToUse, existingChildren);
	        }
	        return null;
	    }
	    return function reconcileChildFibers(returnFiber, currentFiber, newChild) {
	        //判断Fragment
	        const isUnkeyedTopLevelFragment = typeof newChild === 'object' &&
	            newChild !== null &&
	            newChild.key === null &&
	            newChild.type === REACT_FRAGMENT_TYPE;
	        if (isUnkeyedTopLevelFragment) {
	            newChild = newChild?.props.children;
	        }
	        //判断fiber的类型
	        if (typeof newChild === 'object' && newChild !== null) {
	            // 多节点情况
	            if (Array.isArray(newChild)) {
	                return reconcileChildArray(returnFiber, currentFiber, newChild);
	            }
	            switch (newChild.$$typeof) {
	                case REACT_ELEMENT_TYPE:
	                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFiber, newChild));
	                default:
	                    {
	                        console.warn('未实现的reconcile类型', newChild);
	                    }
	                    break;
	            }
	        }
	        if (typeof newChild === 'string' || typeof newChild === 'number') {
	            return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFiber, newChild));
	        }
	        if (currentFiber !== null) {
	            // 兜底删除
	            deleteRemainingChildren(returnFiber, currentFiber);
	        }
	        {
	            console.warn('未实现的reconcile类型', newChild);
	        }
	        return null;
	    };
	}
	function useFiber(fiber, pendingProps) {
	    const clone = createWorkInProgress(fiber, pendingProps);
	    clone.index = 0;
	    clone.sibling = null;
	    return clone;
	}
	function updateFragment$1(returnFiber, current, elements, key, existingChildren) {
	    let fiber;
	    if (!current || current.tag !== Fragment) {
	        fiber = createFiberFromFragment(elements, key);
	    }
	    else {
	        existingChildren.delete(key);
	        fiber = useFiber(current, elements);
	    }
	    fiber.return = returnFiber;
	    return fiber;
	}
	const reconcileChildFibers = ChildReconciler(true);
	const mountChildFibers = ChildReconciler(false);

	const internals = React__namespace.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRE;

	const Passive = 0b0010;
	const HookHasEffect = 0b0001;

	let currentRenderFiber = null;
	let workInProgressHook = null;
	let currentHook = null;
	let renderLane = NoLane;
	const { currentDispatcher } = internals;
	function renderWithHooks(wip, lane) {
	    //赋值操作
	    currentRenderFiber = wip;
	    renderLane = lane;
	    //重置
	    //重置hook链表
	    wip.memoizedState = null;
	    //重置effect链表
	    wip.updateQueue = null;
	    const current = wip.alternate;
	    if (current !== null) {
	        //update
	        currentDispatcher.current = HooksDispatchOnUpdate;
	    }
	    else {
	        // mount
	        currentDispatcher.current = HooksDispatchOnMount;
	    }
	    const Component = wip.type;
	    const props = wip.pendingProps;
	    const child = Component(props);
	    //重置操作
	    currentRenderFiber = null;
	    workInProgressHook = null;
	    currentHook = null;
	    renderLane = NoLane;
	    return child;
	}
	const HooksDispatchOnMount = {
	    useState: mountState,
	    useEffect: mountEffect
	};
	const HooksDispatchOnUpdate = {
	    useState: updateState,
	    useEffect: updateEffect
	};
	function mountEffect(create, deps) {
	    // 找到当前useState对应的hook数据
	    const hook = mountWorkInProgressHook();
	    const nextDeps = deps === undefined ? null : deps;
	    currentRenderFiber.flags |= PassiveEffect;
	    hook.memoizedState = pushEffect(Passive | HookHasEffect, create, undefined, nextDeps);
	}
	function updateEffect(create, deps) {
	    // 找到当前useState对应的hook数据
	    const hook = updateWorkInProgressHook();
	    const nextDeps = deps === undefined ? null : deps;
	    let destroy;
	    if (currentHook !== null) {
	        const prevEffect = currentHook?.memoizedState;
	        destroy = prevEffect.destroy;
	        if (nextDeps !== null) {
	            //浅比较依赖
	            const prevDeps = prevEffect.deps;
	            if (areHookInputsEuqal(nextDeps, prevDeps)) {
	                hook.memoizedState = pushEffect(Passive, create, destroy, nextDeps);
	                return;
	            }
	        }
	        //浅比较后不相等
	        currentRenderFiber.flags |= PassiveEffect;
	        hook.memoizedState = pushEffect(Passive | HookHasEffect, create, destroy, nextDeps);
	    }
	}
	function areHookInputsEuqal(nextDeps, prevDeps) {
	    if (nextDeps === null || prevDeps === null) {
	        return false;
	    }
	    for (let i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
	        if (Object.is(prevDeps[i], nextDeps[i])) {
	            continue;
	        }
	        return false;
	    }
	    return true;
	}
	const pushEffect = (hookFlags, create, destroy, deps) => {
	    // effect自己会形成一个环状链表
	    const effect = { tag: hookFlags, create, destroy, deps, next: null };
	    const fiber = currentRenderFiber;
	    let updateQueue = fiber.updateQueue;
	    if (updateQueue === null) {
	        updateQueue = createFCUpdateQueue();
	        fiber.updateQueue = updateQueue;
	        effect.next = effect;
	        updateQueue.lastEffect = effect;
	    }
	    else {
	        //插入effect的操作
	        const lastEffect = updateQueue.lastEffect;
	        if (lastEffect === null) {
	            effect.next = effect;
	            updateQueue.lastEffect = effect;
	        }
	        else {
	            const firstEffect = lastEffect.next;
	            lastEffect.next = effect;
	            effect.next = firstEffect;
	            updateQueue.lastEffect = effect;
	        }
	    }
	    return effect;
	};
	function createFCUpdateQueue() {
	    const updateQueue = createUpdateQueue();
	    updateQueue.lastEffect = null;
	    return updateQueue;
	}
	function mountState(initialState) {
	    //找到当前useState对应的数据
	    const hook = mountWorkInProgressHook();
	    let memoizedState;
	    if (initialState instanceof Function) {
	        memoizedState = initialState();
	    }
	    else {
	        memoizedState = initialState;
	    }
	    const queue = createUpdateQueue();
	    hook.updateQueue = queue;
	    hook.memoizedState = memoizedState;
	    // @ts-ignore
	    const dispatch = dispatchSetState.bind(null, currentRenderFiber, queue);
	    queue.dispatch = dispatch;
	    return [memoizedState, dispatch];
	}
	function updateState() {
	    //找到当前useState对应的数据
	    const hook = updateWorkInProgressHook();
	    // 计算新state的逻辑
	    const queue = hook.updateQueue;
	    // const baseState = hook.baseState;
	    const pending = queue.shared.pending;
	    const current = currentHook;
	    let baseQueue = current.baseQueue;
	    if (pending !== null) {
	        if (baseQueue !== null) {
	            const baseFirst = baseQueue.next;
	            const pendingFirst = pending.next;
	            pending.next = baseFirst;
	            pending.next = pendingFirst;
	        }
	        baseQueue = pending;
	        current.baseQueue = pending;
	        queue.shared.pending = null;
	        if (baseQueue !== null) {
	            const { memoizedState, baseQueue: newBaseQueue, baseState: newBaseState } = processUpadteQueue(hook.memoizedState, pending, renderLane);
	            hook.memoizedState = memoizedState;
	            hook.baseQueue = newBaseQueue;
	            hook.baseState = newBaseState;
	        }
	    }
	    return [hook.memoizedState, queue.dispatch];
	}
	function dispatchSetState(fiber, updateQueue, action) {
	    const lane = requestUpdateLane();
	    const update = createUpdate(action, lane);
	    enqueueUpdateQueue(updateQueue, update);
	    scheduleUpdateOnFiber(fiber, lane);
	}
	function mountWorkInProgressHook() {
	    const hook = {
	        memoizedState: null,
	        updateQueue: null,
	        next: null,
	        baseQueue: null,
	        baseState: null
	    };
	    if (workInProgressHook === null) {
	        // mount时 第一个hook
	        if (currentRenderFiber === null) {
	            // 表示没有在函数组件内调用hook
	            throw new Error('请在函数组件内调用hook');
	        }
	        else {
	            workInProgressHook = hook;
	            currentRenderFiber.memoizedState = workInProgressHook;
	        }
	    }
	    else {
	        // mount时后续的hook
	        workInProgressHook.next = hook;
	        workInProgressHook = hook;
	    }
	    return workInProgressHook;
	}
	function updateWorkInProgressHook() {
	    //TODO： render阶段触发的更新
	    let nextCurrentHook;
	    if (currentHook === null) {
	        // 这是FC update时的第一个hook
	        const current = currentRenderFiber?.alternate;
	        if (current !== null) {
	            nextCurrentHook = current?.memoizedState;
	        }
	        else {
	            nextCurrentHook = null;
	        }
	    }
	    else {
	        // 这是FC update后续的hook
	        nextCurrentHook = currentHook.next;
	    }
	    if (nextCurrentHook === null) {
	        //  mount/update时 hooks数量不对
	        throw new Error(`组件 ${currentRenderFiber?.type}本次执行时的Hook比上次执行时多`);
	    }
	    currentHook = nextCurrentHook;
	    const newHook = {
	        memoizedState: currentHook.memoizedState,
	        updateQueue: currentHook.updateQueue,
	        next: null,
	        baseQueue: currentHook.baseQueue,
	        baseState: currentHook.baseState
	    };
	    if (workInProgressHook === null) {
	        // mount时 第一个hook
	        if (currentRenderFiber === null) {
	            // 表示没有在函数组件内调用hook
	            throw new Error('请在函数组件内调用hook');
	        }
	        else {
	            workInProgressHook = newHook;
	            currentRenderFiber.memoizedState = workInProgressHook;
	        }
	    }
	    else {
	        // mount时后续的hook
	        workInProgressHook.next = newHook;
	        workInProgressHook = newHook;
	    }
	    return workInProgressHook;
	}

	// 递归中的递阶段
	const beginWork = (wip, renderLane) => {
	    // 比较再返回子FiberNode
	    switch (wip.tag) {
	        case HostRoot:
	            //1.计算状态的最新值
	            //2.创建子fiberNode
	            return updateHostRoot(wip, renderLane);
	        case HostComponent:
	            return updateHostComponent(wip);
	        case HostText:
	            return null;
	        case FunctionComponent:
	            return updateFuncComponent(wip, renderLane);
	        case Fragment:
	            return updateFragment(wip);
	        default:
	            {
	                console.warn('begin work未实现的类型');
	            }
	            break;
	    }
	    return null;
	};
	function updateFragment(wip) {
	    const nextChildren = wip.pendingProps;
	    reconcileChildren(wip, nextChildren);
	    return wip.child;
	}
	function updateFuncComponent(wip, renderLane) {
	    reconcileChildren(wip, renderWithHooks(wip, renderLane));
	    return wip.child;
	}
	function updateHostRoot(wip, renderLane) {
	    const baseState = wip.memoizedState;
	    const updateQueue = wip.updateQueue;
	    const pending = updateQueue.shared.pending;
	    updateQueue.shared.pending = null;
	    const { memoizedState } = processUpadteQueue(baseState, pending, renderLane);
	    wip.memoizedState = memoizedState;
	    const nextChildren = wip.memoizedState;
	    reconcileChildren(wip, nextChildren);
	    return wip.child;
	}
	function updateHostComponent(wip) {
	    const nextProps = wip.pendingProps;
	    const nextChildren = nextProps.children;
	    reconcileChildren(wip, nextChildren);
	    return wip.child;
	}
	function reconcileChildren(wip, children) {
	    const current = wip.alternate;
	    if (current !== null) {
	        // update
	        wip.child = reconcileChildFibers(wip, current?.child, children);
	    }
	    else {
	        // mount
	        wip.child = mountChildFibers(wip, null, children);
	    }
	}

	let nextEffect = null;
	const commitMutationEffect = (finishedWork, root) => {
	    nextEffect = finishedWork;
	    while (nextEffect !== null) {
	        // 向下遍历
	        const child = nextEffect.child;
	        if ((nextEffect.subtreeFlags & (MutationMask | PassiveMask)) !== NoFlags &&
	            child !== null) {
	            nextEffect = child;
	        }
	        else {
	            // 向上遍历 DFS
	            up: while (nextEffect !== null) {
	                commitMutationEffectOnFiber(nextEffect, root);
	                const sibling = nextEffect.sibling;
	                if (sibling !== null) {
	                    nextEffect = sibling;
	                    break up;
	                }
	                nextEffect = nextEffect.return;
	            }
	        }
	    }
	};
	const commitMutationEffectOnFiber = (finishedWork, root) => {
	    const flags = finishedWork.flags;
	    if ((flags & Placement) !== NoFlags) {
	        commitPlacement(finishedWork);
	        // 从flags移除placement
	        finishedWork.flags &= ~Placement;
	    }
	    if ((flags & Update) !== NoFlags) {
	        commitUpdate(finishedWork);
	        // 从flags移除update
	        finishedWork.flags &= ~Update;
	    }
	    if ((flags & ChildDeletion) !== NoFlags) {
	        const deletions = finishedWork.deletions;
	        if (deletions !== null) {
	            deletions.forEach((childToDelete) => {
	                commitDeletion(childToDelete, root);
	            });
	        }
	        // 从flags移除childDeletion
	        finishedWork.flags &= ~ChildDeletion;
	    }
	    if ((flags & PassiveEffect) !== NoFlags) {
	        // 收集回调
	        commitPassiveEffect(finishedWork, root, 'update');
	        finishedWork.flags &= ~PassiveEffect;
	    }
	};
	function commitPassiveEffect(fiber, root, type) {
	    //update
	    //unmount
	    if (fiber.tag !== FunctionComponent ||
	        (type === 'update' && (fiber.flags & PassiveEffect) === NoFlags)) {
	        // 不是函数组件，就不存在副作用
	        return;
	    }
	    const updateQueue = fiber.updateQueue;
	    if (updateQueue !== null) {
	        if (updateQueue.lastEffect === null && true) {
	            console.error('当fc存在passoveEffect flag时，不应该不存在effect');
	        }
	        root.pendingPassiveEffects[type].push(updateQueue.lastEffect);
	    }
	}
	function commitHookEffectList(flags, lastEffect, callback) {
	    let effect = lastEffect.next;
	    do {
	        if ((effect.tag & flags) === flags) {
	            callback(effect);
	        }
	        effect = effect.next;
	    } while (effect !== lastEffect.next);
	}
	function commitHookEffectListUnmount(flags, lastEffect
	// callback: (effect: Effect) => void
	) {
	    commitHookEffectList(flags, lastEffect, (effect) => {
	        const destroy = effect.destroy;
	        if (typeof destroy === 'function') {
	            destroy();
	        }
	        //卸载了就没有后续流程了
	        effect.tag &= ~HookHasEffect;
	    });
	}
	function commitHookEffectListDestroy(flags, lastEffect) {
	    commitHookEffectList(flags, lastEffect, (effect) => {
	        const destroy = effect.destroy;
	        if (typeof destroy === 'function') {
	            destroy();
	        }
	    });
	}
	function commitHookEffectListCreate(flags, lastEffect) {
	    commitHookEffectList(flags, lastEffect, (effect) => {
	        const create = effect.create;
	        if (typeof create === 'function') {
	            effect.destroy = create();
	        }
	    });
	}
	function recordHostChildrenToDelete(childrenToDelete, unmountFiber) {
	    //1. 找到第一个root host节点
	    const lastOne = childrenToDelete[childrenToDelete.length - 1];
	    if (!lastOne) {
	        childrenToDelete.push(unmountFiber);
	    }
	    else {
	        let node = lastOne.sibling;
	        while (node !== null) {
	            if (unmountFiber === node) {
	                childrenToDelete.push(unmountFiber);
	            }
	            node = node.sibling;
	        }
	    }
	    //2. 每找到一个host节点，判断下这个节点是不是1找到那个节点的兄弟节点
	}
	const commitDeletion = (childToDelete, root) => {
	    // let rootHostNode: FiberNode | null = null;
	    const rootChildrenToDelete = [];
	    //递归子树
	    commitNestedComponent(childToDelete, (unmountFiber) => {
	        switch (unmountFiber.tag) {
	            case HostComponent:
	                recordHostChildrenToDelete(rootChildrenToDelete, unmountFiber);
	                //TODO: 解绑ref
	                return;
	            case HostText:
	                recordHostChildrenToDelete(rootChildrenToDelete, unmountFiber);
	                return;
	            case FunctionComponent:
	                // TODO: useEffect unmount处理、解绑ref
	                commitPassiveEffect(unmountFiber, root, 'unmount');
	                return;
	            default:
	                {
	                    console.warn('未处理的unmount类型', unmountFiber);
	                }
	                break;
	        }
	    });
	    //移除rootHost Component的DOM
	    if (rootChildrenToDelete.length) {
	        const hostParent = getHostParent(childToDelete);
	        if (hostParent !== null) {
	            rootChildrenToDelete.forEach((node) => {
	                removeChild(node.stateNode, hostParent);
	            });
	        }
	    }
	    childToDelete.return = null;
	    childToDelete.child = null;
	};
	function commitNestedComponent(root, onCommitUnmount) {
	    let node = root;
	    while (true) {
	        onCommitUnmount(node);
	        if (node.child !== null) {
	            //向下遍历
	            node.child.return = node;
	            node = node.child;
	            continue;
	        }
	        if (node === root) {
	            //终止条件
	            return;
	        }
	        while (node.sibling === null) {
	            //向上递归
	            if (node.return === null || node.return === root) {
	                return;
	            }
	            node = node.return;
	        }
	        node.sibling.return = node.return;
	        node = node.sibling;
	    }
	}
	const commitPlacement = (finishedWork) => {
	    // finished Dom
	    {
	        console.warn('执行placement操作', finishedWork);
	    }
	    // parent Dom
	    const hostParent = getHostParent(finishedWork);
	    // host sibling
	    const sibling = getHostSibling(finishedWork);
	    // finished Dom
	    if (hostParent !== null) {
	        insertOrAppendPlacementNodeIntoContainer(finishedWork, hostParent, sibling);
	    }
	};
	function getHostSibling(fiber) {
	    let node = fiber;
	    findSibling: while (true) {
	        while (node.sibling === null) {
	            const parent = node.return;
	            if (parent === null ||
	                parent.tag === HostComponent ||
	                parent.tag === HostRoot) {
	                return null;
	            }
	            node = parent;
	        }
	        node.sibling.return = node.return;
	        node = node.sibling;
	        while (node.tag !== HostText && node.tag !== HostComponent) {
	            // 不是host类型，向下遍历
	            if ((node.flags & Placement) !== NoFlags) {
	                continue findSibling;
	            }
	            if (node.child === null) {
	                continue findSibling;
	            }
	            else {
	                node.child.return = node;
	                node = node.child;
	            }
	        }
	        if ((node.flags & Placement) === NoFlags) {
	            return node.stateNode;
	        }
	    }
	}
	const getHostParent = (fiber) => {
	    let parent = fiber.return;
	    while (parent) {
	        const parentTag = parent.tag;
	        // 两种父级节点 HostRoot， HostComponent
	        if (parentTag === HostComponent) {
	            return parent.stateNode;
	        }
	        if (parentTag === HostRoot) {
	            return parent.stateNode.container;
	        }
	        parent = parent.return;
	    }
	    {
	        console.warn('未找到host parent');
	    }
	    return null;
	};
	const insertOrAppendPlacementNodeIntoContainer = (finishedWork, hostParent, before) => {
	    if (finishedWork.tag === HostComponent || finishedWork.tag === HostText) {
	        if (before) {
	            insertChildToContainer(finishedWork.stateNode, hostParent, before);
	        }
	        else {
	            appendChildToContainer(hostParent, finishedWork.stateNode);
	        }
	        return;
	    }
	    const child = finishedWork.child;
	    if (child !== null) {
	        insertOrAppendPlacementNodeIntoContainer(child, hostParent);
	        let sibling = child.sibling;
	        while (sibling !== null) {
	            insertOrAppendPlacementNodeIntoContainer(sibling, hostParent);
	            sibling = sibling.sibling;
	        }
	    }
	};

	function markUpdate(fiber) {
	    fiber.flags |= Update;
	}
	// 递归中的归
	const completeWork = (wip) => {
	    const newProps = wip.pendingProps;
	    const current = wip.alternate;
	    switch (wip.tag) {
	        case HostComponent:
	            //构建DOM
	            //将DOM插入到DOM书中
	            if (current !== null && wip.stateNode) {
	                // update
	                // 1.判断props是否变化
	                // 2.变了就➕update flag
	                markUpdate(wip);
	            }
	            else {
	                // mount
	                //构建DOM
	                const instance = createInstance(wip.type, newProps);
	                //将DOM插入到DOM
	                appendAllChildren(instance, wip);
	                wip.stateNode = instance;
	            }
	            bubbleProperties(wip);
	            return null;
	        case HostText:
	            if (current !== null && wip.stateNode) {
	                // update
	                const oldText = current.memoizedProps.content;
	                const newText = newProps.content;
	                if (oldText !== newText) {
	                    markUpdate(wip);
	                }
	            }
	            else {
	                // mount
	                //构建DOM
	                const instance = createTextInstance(newProps.content);
	                wip.stateNode = instance;
	            }
	            bubbleProperties(wip);
	            return null;
	        case HostRoot:
	        case FunctionComponent:
	        case Fragment:
	            bubbleProperties(wip);
	            return null;
	        default:
	            {
	                console.warn('未处理的completeWork情况', wip);
	            }
	            break;
	    }
	};
	function appendAllChildren(parent, wip) {
	    let node = wip.child;
	    while (node !== null) {
	        if (node.tag === HostComponent || node.tag === HostText) {
	            appendInitialChild(parent, node?.stateNode);
	        }
	        else if (node.child !== null) {
	            node.child.return = node;
	            node = node.child;
	            continue;
	        }
	        if (node === wip) {
	            return;
	        }
	        while (node.sibling === null) {
	            if (node.return === null || node.return === wip) {
	                return;
	            }
	            node = node?.return;
	        }
	        node.sibling.return = node.return;
	        node = node.sibling;
	    }
	}
	function bubbleProperties(wip) {
	    let subtreeFlags = NoFlags;
	    let child = wip.child;
	    while (child !== null) {
	        subtreeFlags |= child.subtreeFlags;
	        subtreeFlags |= child.flags;
	        child.return = wip;
	        child = child.sibling;
	    }
	    wip.subtreeFlags |= subtreeFlags;
	}

	let syncQueue = null;
	let isFlushingSyncQueue = false;
	function scheduleSyncCallback(callback) {
	    if (syncQueue === null) {
	        syncQueue = [callback];
	    }
	    else {
	        syncQueue.push(callback);
	    }
	}
	function flushSyncCallbacks() {
	    if (!isFlushingSyncQueue && syncQueue) {
	        isFlushingSyncQueue = true;
	        try {
	            syncQueue.forEach((callback) => callback());
	        }
	        catch (e) {
	            {
	                console.error('flushSyncCallbacks报错', e);
	            }
	        }
	        finally {
	            isFlushingSyncQueue = false;
	            syncQueue = null;
	        }
	    }
	}

	let workInProgress = null;
	let wipRootRenderLane = NoLane;
	let rootDoseHasPassiveEffects = false;
	const RootInComplete = 1;
	const RootCompleted = 2;
	//TODO: 执行过程中报错还需要一种状态
	function prepareFreshStack(root, lane) {
	    root.finishedLane = NoLane;
	    root.finishedWork = null;
	    workInProgress = createWorkInProgress(root.current, {});
	    wipRootRenderLane = lane;
	}
	function scheduleUpdateOnFiber(fiber, lane) {
	    const root = markUpdateFromFiberFiber(fiber);
	    markRootUpdated(root, lane);
	    // renderRoot(root);
	    ensureRootIsScheduled(root);
	}
	//schedule阶段入口
	function ensureRootIsScheduled(root) {
	    const updateLane = getHeighestPriorityLane(root.pendingLanes);
	    const existingCallback = root.callbackNode;
	    if (updateLane === NoLane) {
	        if (existingCallback !== null) {
	            Scheduler.unstable_cancelCallback(existingCallback);
	        }
	        root.callbackNode = null;
	        root.callbackPriority = NoLane;
	        return;
	    }
	    const curPriority = updateLane;
	    const prevPriority = root.callbackPriority;
	    if (curPriority === prevPriority) {
	        return;
	    }
	    if (existingCallback !== null) {
	        Scheduler.unstable_cancelCallback(existingCallback);
	    }
	    let newCallbackNode = null;
	    if (updateLane === SyncLane) {
	        //同步更新，用微任务调度
	        {
	            console.log('在微任务重调度，优先级', updateLane);
	        }
	        // [performSyncWorkOnRoot, performSyncWorkOnRoot,performSyncWorkOnRoot]
	        scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
	        scheduleMicroTask(flushSyncCallbacks);
	    }
	    else {
	        //其他优先级（并发更新），用宏任务调度
	        const schedulePriority = lanesToSchedulerPriority(updateLane);
	        newCallbackNode = Scheduler.unstable_scheduleCallback(schedulePriority, 
	        // @ts-ignore
	        performConcurrentWorkOnRoot.bind(null, root));
	    }
	    root.callbackNode = newCallbackNode;
	    root.callbackPriority = curPriority;
	}
	function markRootUpdated(root, lane) {
	    root.pendingLanes = mergeLanes(root.pendingLanes, lane);
	}
	function markUpdateFromFiberFiber(fiber) {
	    let node = fiber;
	    let parent = node.return;
	    while (parent !== null) {
	        node = parent;
	        parent = node.return;
	    }
	    if (node.tag === HostRoot) {
	        return node.stateNode;
	    }
	    return null;
	}
	function performConcurrentWorkOnRoot(root, didTimeout) {
	    // 保证useEffect回调执行
	    const curCallback = root.callbackNode;
	    const didFlushPassiveEffect = flushPassiveEffect(root.pendingPassiveEffects);
	    if (didFlushPassiveEffect) {
	        if (root.callbackNode !== curCallback) {
	            return null;
	        }
	    }
	    const lane = getHeighestPriorityLane(root.pendingLanes);
	    const currentCallbackNode = root.callbackNode;
	    if (lane === NoLane) {
	        return null;
	    }
	    const needSync = lane === SyncLane || didTimeout;
	    //render 阶段
	    const existStatus = renderRoot(root, lane, !needSync);
	    ensureRootIsScheduled(root);
	    if (existStatus === RootInComplete) {
	        if (root.callbackNode !== currentCallbackNode) {
	            return null;
	        }
	        return performConcurrentWorkOnRoot.bind(null, root);
	    }
	    if (existStatus === RootCompleted) {
	        const finishedWork = root.current.alternate;
	        root.finishedWork = finishedWork;
	        root.finishedLane = lane;
	        wipRootRenderLane = NoLane;
	        // wip fiberNode树，树中的falgs
	        commitRoot(root);
	    }
	    else {
	        console.warn('还未实现并发更新结束状态');
	    }
	}
	function performSyncWorkOnRoot(root) {
	    const nextLane = getHeighestPriorityLane(root.pendingLanes);
	    if (nextLane !== SyncLane) {
	        //其他比syncLane低的优先级，或者no lane
	        ensureRootIsScheduled(root);
	        return;
	    }
	    const existStatus = renderRoot(root, nextLane, false);
	    if (existStatus === RootCompleted) {
	        const finishedWork = root.current.alternate;
	        root.finishedWork = finishedWork;
	        root.finishedLane = nextLane;
	        wipRootRenderLane = NoLane;
	        // wip fiberNode树，树中的falgs
	        commitRoot(root);
	    }
	    else {
	        console.warn('还未实现同步更新结束状态');
	    }
	}
	function renderRoot(root, lane, shouldTimeSlice) {
	    {
	        console.warn(`开始${shouldTimeSlice ? '并发' : '同步'}更新`, root);
	    }
	    if (wipRootRenderLane !== lane) {
	        // 初始化
	        prepareFreshStack(root, lane);
	    }
	    do {
	        try {
	            shouldTimeSlice ? workLoopConcurrent() : workLoopSync();
	            break;
	        }
	        catch (e) {
	            {
	                console.warn('Work Loop发生错误', e);
	            }
	            workInProgress = null;
	        }
	    } while (true);
	    //中断执行
	    if (shouldTimeSlice && workInProgress !== null) {
	        return RootInComplete;
	    }
	    //render执行完了
	    if (!shouldTimeSlice && workInProgress !== null) {
	        console.error('render阶段结束时wip不应该不为null');
	    }
	    return RootCompleted;
	    // const finishedWork = root.current.alternate;
	    // root.finishedWork = finishedWork;
	    // root.finishedLane = lane;
	    // wipRootRenderLane = NoLane;
	    // // wip fiberNode树，树中的falgs
	    // commitRoot(root);
	}
	function commitRoot(root) {
	    const finishedWork = root.finishedWork;
	    if (finishedWork === null) {
	        return;
	    }
	    {
	        console.warn('commit阶段开始', finishedWork);
	    }
	    const lane = root.finishedLane;
	    if (lane === NoLane && true) {
	        console.error('commit阶段finished不应该是NoLane');
	    }
	    //重置
	    root.finishedWork = null;
	    root.finishedLane = NoLane;
	    markRootFinished(root, lane);
	    if ((finishedWork.flags & PassiveMask) !== NoFlags ||
	        (finishedWork.subtreeFlags & PassiveMask) !== NoFlags) {
	        // 代表本次work有副作用
	        if (!rootDoseHasPassiveEffects) {
	            rootDoseHasPassiveEffects = true;
	            //调度副作用
	            Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, () => {
	                //执行副作用
	                flushPassiveEffect(root.pendingPassiveEffects);
	                return;
	            });
	        }
	    }
	    //判断是否存在3个字阶段需要执行的操作
	    //root flags or root subtreeFlags
	    const subtreeHasEffect = (finishedWork.subtreeFlags & MutationMask) !== NoFlags;
	    const rootHasEffect = (finishedWork.flags & MutationMask) !== NoFlags;
	    if (subtreeHasEffect || rootHasEffect) {
	        // beforeMutation
	        // mutation
	        commitMutationEffect(finishedWork, root);
	        root.current = finishedWork;
	        // layout
	    }
	    else {
	        root.current = finishedWork;
	    }
	    rootDoseHasPassiveEffects = false;
	    ensureRootIsScheduled(root);
	}
	function flushPassiveEffect(pendingPassiveEffects) {
	    // 先执行destroy，在执行create
	    let didFlushPassiveEffect = false;
	    pendingPassiveEffects.unmount.forEach((effect) => {
	        didFlushPassiveEffect = true;
	        commitHookEffectListUnmount(Passive, effect);
	    });
	    pendingPassiveEffects.unmount = [];
	    pendingPassiveEffects.update.forEach((effect) => {
	        didFlushPassiveEffect = true;
	        commitHookEffectListDestroy(Passive | HookHasEffect, effect);
	    });
	    pendingPassiveEffects.update.forEach((effect) => {
	        didFlushPassiveEffect = true;
	        commitHookEffectListCreate(Passive | HookHasEffect, effect);
	    });
	    pendingPassiveEffects.update = [];
	    flushSyncCallbacks();
	    return didFlushPassiveEffect;
	}
	function workLoopSync() {
	    while (workInProgress !== null) {
	        performUnitOfWork(workInProgress);
	    }
	}
	function workLoopConcurrent() {
	    while (workInProgress !== null && !Scheduler.unstable_shouldYield()) {
	        performUnitOfWork(workInProgress);
	    }
	}
	function performUnitOfWork(fiber) {
	    const next = beginWork(fiber, wipRootRenderLane);
	    fiber.memoizedProps = fiber.pendingProps;
	    if (next === null) {
	        completeUnitOfWrok(fiber);
	    }
	    else {
	        workInProgress = next;
	    }
	}
	function completeUnitOfWrok(fiber) {
	    let node = fiber;
	    do {
	        completeWork(node);
	        const sibling = node.sibling;
	        if (sibling !== null) {
	            workInProgress = sibling;
	            return;
	        }
	        node = node.return;
	        workInProgress = node;
	    } while (node !== null);
	}

	function createContainer(container) {
	    const hostRootFiber = new FiberNode(HostRoot, {}, null);
	    const root = new FiberRootNode(container, hostRootFiber);
	    hostRootFiber.updateQueue = createUpdateQueue();
	    return root;
	}
	function updateContainer(element, root) {
	    const hostRootFiber = root.current;
	    const lane = requestUpdateLane();
	    const update = createUpdate(element, lane);
	    enqueueUpdateQueue(hostRootFiber.updateQueue, update);
	    scheduleUpdateOnFiber(hostRootFiber, lane);
	    return element;
	}

	// ReactDom.createRoot(root).render(<App/ >)
	let idCounter = 0;
	const createRoot = () => {
	    const container = {
	        rootID: idCounter++,
	        children: []
	    };
	    //@ts-ignore
	    const root = createContainer(container);
	    function getChildrenAsJSX(root) {
	        const children = childToJSX(getChildren(root));
	        if (Array.isArray(children)) {
	            return {
	                $$typeof: REACT_FRAGMENT_TYPE,
	                type: REACT_FRAGMENT_TYPE,
	                key: null,
	                ref: null,
	                props: { children },
	                __mark: 'Leo'
	            };
	        }
	        return children;
	    }
	    function childToJSX(child) {
	        if (typeof child === 'string' || typeof child === 'number') {
	            return child;
	        }
	        if (Array.isArray(child)) {
	            if (child.length === 0) {
	                return null;
	            }
	            if (child.length === 1) {
	                return childToJSX(child[0]);
	            }
	            const children = child.map(childToJSX);
	            if (children.every((child) => typeof child === 'string' || typeof child === 'number')) {
	                children.join('');
	            }
	            return children;
	        }
	        if (Array.isArray(child.children)) {
	            const instance = child;
	            const children = childToJSX(instance.children);
	            const props = instance.props;
	            if (children !== null) {
	                props.children = children;
	            }
	            return {
	                $$typeof: REACT_ELEMENT_TYPE,
	                type: instance.type,
	                key: null,
	                ref: null,
	                props,
	                __mark: 'Leo'
	            };
	        }
	        //Text Instance
	        return child.text;
	    }
	    function getChildren(parent) {
	        if (parent) {
	            return parent.children;
	        }
	        return null;
	    }
	    return {
	        _Scheduler: Scheduler__namespace,
	        render(element) {
	            return updateContainer(element, root);
	        },
	        getChildren() {
	            return getChildren(container);
	        },
	        getChildrenAsJSX() {
	            return getChildrenAsJSX(container);
	        }
	    };
	};

	var ReactNoopRenderer = /*#__PURE__*/Object.freeze({
		__proto__: null,
		createRoot: createRoot
	});

	return ReactNoopRenderer;

}));
